import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { readFileSync, mkdirSync, copyFileSync, existsSync } from "fs";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === 'production');

// Get version from manifest.json
const manifest = JSON.parse(readFileSync('./manifest.json', 'utf8'));
const version = manifest.version;
const outputDir = `build/${version}`;

// Create output directory if it doesn't exist
mkdirSync(outputDir, { recursive: true });

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ['src/main-api.ts'],
	bundle: true,
	external: [
		'obsidian',
		'electron',
		'@codemirror/autocomplete',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		...builtins],
	format: 'cjs',
	target: 'es2020',
	logLevel: "info",
	sourcemap: prod ? false : 'inline',
	treeShaking: true,
	outfile: `${outputDir}/main.js`,
});

if (prod) {
	await context.rebuild();
	
	// Copy additional files to build directory
	console.log('Copying additional files...');
	['manifest.json', 'styles.css'].forEach(file => {
		if (existsSync(file)) {
			copyFileSync(file, `${outputDir}/${file}`);
			console.log(`  ✓ ${file}`);
		}
	});
	
	// Copy WASM file if exists
	const wasmSrc = 'node_modules/@echogarden/fvad-wasm/fvad.wasm';
	if (existsSync(wasmSrc)) {
		copyFileSync(wasmSrc, `${outputDir}/fvad.wasm`);
		console.log('  ✓ fvad.wasm');
	}
	
	process.exit(0);
} else {
	await context.watch();
}